CREATE DATABASE learn2program_db;
USE learn2program_db;

CREATE TABLE Users (
    id int AUTO_INCREMENT,
    pass char(20) NOT NULL,
    username char(20) NOT NULL UNIQUE,
    mail char(50) NOT NULL UNIQUE,
    PRIMARY KEY(id)
);

CREATE TABLE Groups (
    id int AUTO_INCREMENT,
    name char(30) NOT NULL UNIQUE,
    PRIMARY KEY(id)
);

CREATE TABLE member_of (
    memberId int REFERENCES Users(id),
    groupId int REFERENCES Groups(id),
    PRIMARY KEY (memberId, groupId)
);

/* Only allow 4 values for difficulty? => easy, intermediate, hard, insane */
CREATE TABLE Types (
    id int AUTO_INCREMENT,
    subject char(50) NOT NULL UNIQUE,
    difficulty char(15) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE answer (
    given_code varchar(50) NOT NULL UNIQUE,
    success bool NOT NULL,
    uId int REFERENCES Users(id),
    eId int REFERENCES Exercises(id),
    PRIMARY KEY(uId, eId)
);

/* Must make sure that at least 1 exercise belongs to a serie
    => design the site so that this is always the case? */
CREATE TABLE Series (
    id int AUTO_INCREMENT,
    title char(50) NOT NULL,
    description varchar(50),
    makerId int REFERENCES Users(id),
    tId int REFERENCES Types(id),
    PRIMARY KEY(id)
);

/* Again choose between pre-defined values for rating? */
CREATE TABLE rated (
    userId int REFERENCES Users(id),
    serieId int REFERENCES Series(id),
    rating int NOT NULL,
    PRIMARY KEY (userId, serieId)
);

CREATE TABLE Exercises (
    id int AUTO_INCREMENT,
    question varchar(50) NOT NULL,
    tips varchar(50),
    start_code varchar(50) NOT NULL,
    expected_result varchar(50) NOT NULL,
    serieId int REFERENCES Series(id),
    PRIMARY KEY(id)
);

/* Make sure password, username and mail are not empty. */
delimiter //
CREATE TRIGGER check_users
BEFORE INSERT ON Users 
FOR EACH ROW 
BEGIN
    IF NEW.pass = "" THEN
        SET NEW.pass = Null;
    END IF;
    IF NEW.username = "" THEN
        SET NEW.username = Null;
    END IF;
    IF NEW.mail = "" THEN
        SET NEW.pass = Null;
    END IF;
END;//

delimiter ;

/* Make sure the answer is not empty. */
delimiter //
CREATE TRIGGER check_answer
BEFORE INSERT ON answer 
FOR EACH ROW 
BEGIN
    IF NEW.given_code = "" THEN
        SET NEW.given_code = Null;
    END IF; 
END;//

delimiter ;

/* Make sure the title from serie is not empty. */
delimiter //
CREATE TRIGGER check_title
BEFORE INSERT ON Series
FOR EACH ROW 
BEGIN
    IF NEW.title = "" THEN
        SET NEW.title = Null;
    END IF; 
END;//

delimiter ;

/* Make sure the group name is not empty. */
delimiter //
CREATE TRIGGER check_group
BEFORE INSERT ON Groups
FOR EACH ROW 
BEGIN
    IF NEW.name = "" THEN
        SET NEW.name = Null;
    END IF; 
END;//

delimiter ;

/* Make sure the subject and difficulty are not empty. */
delimiter //
CREATE TRIGGER check_type
BEFORE INSERT ON Types
FOR EACH ROW 
BEGIN
    IF NEW.subject = "" THEN
        SET NEW.subject = Null;
    END IF; 
    IF NEW.difficulty = "" THEN
        SET NEW.difficulty = Null;
    END IF;
END;//

delimiter ;

/* Make sure question, start_code and expected_result are not empty. */
delimiter //
CREATE TRIGGER check_exercise
BEFORE INSERT ON Exercises
FOR EACH ROW 
BEGIN
    IF NEW.question = "" THEN
        SET NEW.question = Null;
    END IF;
    IF NEW.start_code = "" THEN
        SET NEW.start_code = Null;
    END IF;
    IF NEW.expected_result = "" THEN
        SET NEW.expected_result = Null;
    END IF;
END;//


