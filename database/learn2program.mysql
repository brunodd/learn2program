DROP DATABASE if exists learn2program_db;

CREATE DATABASE learn2program_db;
USE learn2program_db;

CREATE TABLE users (
    id int AUTO_INCREMENT,
    pass char(255) NOT NULL,
    username char(20) NOT NULL UNIQUE,
    mail char(50) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE friends (
    id1 int REFERENCES users(id),
    id2 int REFERENCES users(id),
    PRIMARY KEY(id1, id2)
);

CREATE TABLE groups (
    id int AUTO_INCREMENT,
    name char(30) NOT NULL UNIQUE,
    founderId int NOT NULL,
    FOREIGN KEY (founderId) REFERENCES users(id),
    PRIMARY KEY(id)
);

CREATE TABLE members_of_groups (
    memberId int REFERENCES users(id),
    groupId int REFERENCES Groups(id),
    PRIMARY KEY (memberId, groupId)
);

/* Only allow 4 values for difficulty? => easy, intermediate, hard, insane */
CREATE TABLE types (
    id int AUTO_INCREMENT,
    subject char(50) NOT NULL,
    difficulty ENUM('easy', 'intermediate', 'hard', 'insane') NOT NULL,
    PRIMARY KEY(id),
    UNIQUE(subject, difficulty)
);

CREATE TABLE exercises_answers (
    given_code varchar(50) NOT NULL UNIQUE,
    success bool NOT NULL,
    uId int REFERENCES users(id),
    eId int REFERENCES exercises(id),
    PRIMARY KEY(uId, eId)
);

/* Must make sure that at least 1 exercise belongs to a serie
    => design the site so that this is always the case? */
CREATE TABLE series (
    id int AUTO_INCREMENT,
    title char(50) NOT NULL,
    description varchar(50),
    makerId int NOT NULL,
    FOREIGN KEY (makerId) REFERENCES users(id),
    tId int NOT NULL,
    FOREIGN KEY (tId) REFERENCES types(id),
    PRIMARY KEY(id),
    UNIQUE(title, tId)
);

/* Again choose between pre-defined values for rating? */
CREATE TABLE series_ratings (
    userId int REFERENCES users(id),
    serieId int REFERENCES series(id),
    rating ENUM('0', '1', '2', '3', '4', '5') NOT NULL,
    PRIMARY KEY (userId, serieId)
);

CREATE TABLE exercises (
    id int AUTO_INCREMENT,
    question varchar(50) NOT NULL,
    tips varchar(50),
    start_code varchar(50) NOT NULL,
    expected_result varchar(50) NOT NULL,
    serieId int NOT NULL,
    FOREIGN KEY (serieId) REFERENCES series(id),
    PRIMARY KEY(id)
);

/* Make sure password, username and mail are not empty. */
delimiter //
CREATE TRIGGER check_users
BEFORE INSERT ON users 
FOR EACH ROW 
BEGIN
    IF NEW.pass = "" THEN
        SET NEW.pass = Null;
    END IF;
    IF NEW.username = "" THEN
        SET NEW.username = Null;
    END IF;
    IF NEW.mail = "" THEN
        SET NEW.pass = Null;
    END IF;
END;//

delimiter ;

/* Make sure the answer is not empty. */
delimiter //
CREATE TRIGGER check_answer
BEFORE INSERT ON exercises_answers
FOR EACH ROW 
BEGIN
    IF NEW.given_code = "" THEN
        SET NEW.given_code = Null;
    END IF; 
END;//

delimiter ;

/* Make sure the title from serie is not empty. */
delimiter //
CREATE TRIGGER check_title
BEFORE INSERT ON series
FOR EACH ROW 
BEGIN
    IF NEW.title = "" THEN
        SET NEW.title = Null;
    END IF; 
END;//

delimiter ;

/* Make sure the group name is not empty. */
delimiter //
CREATE TRIGGER check_group
BEFORE INSERT ON groups
FOR EACH ROW 
BEGIN
    IF NEW.name = "" THEN
        SET NEW.name = Null;
    END IF; 
END;//

delimiter ;

/* Make sure the subject and difficulty are not empty. */
delimiter //
CREATE TRIGGER check_type
BEFORE INSERT ON types
FOR EACH ROW 
BEGIN
    IF NEW.subject = "" THEN
        SET NEW.subject = Null;
    END IF; 
    IF NEW.difficulty = "" THEN
        SET NEW.difficulty = Null;
    END IF;
END;//

delimiter ;

/* Make sure question, start_code and expected_result are not empty. */
delimiter //
CREATE TRIGGER check_exercise
BEFORE INSERT ON exercises
FOR EACH ROW 
BEGIN
    IF NEW.question = "" THEN
        SET NEW.question = Null;
    END IF;
    IF NEW.start_code = "" THEN
        SET NEW.start_code = Null;
    END IF;
    IF NEW.expected_result = "" THEN
        SET NEW.expected_result = Null;
    END IF;
END;//

/* Make sure question, start_code and expected_result are not empty. */
delimiter //
CREATE TRIGGER check_friends
BEFORE INSERT ON friends
FOR EACH ROW 
BEGIN
    IF NEW.id1 = NEW.id2 THEN
        SET NEW.id1 = Null;
    END IF;
    IF EXISTS (SELECT * FROM friends WHERE (id1 = NEW.id1 and id2 = NEW.id2) or (id1 = NEW.id2 and id2 = NEW.id1)) THEN
        SET NEW.id1 = Null;
    END IF;
END;//

